<?php
/**
* @file
* Code for the PDF for the exercises and exercise programs
*/

/**
 * Implementation of hook_menu()
 */ 
function motionsplan_exercise_pdf_menu() {
  /*
  $items['node/%node/pdf'] = array(
    'title' => 'PDF',
    'page callback' => 'exercise_pdf_landscape',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'exercise_pdf_access',
    'access arguments' => array(1)
  );
  $items['node/%node/pdf2'] = array(
    'title' => 'PDF2',
    'page callback' => 'exercise_pdf_portrait',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'exercise_pdf_access',
    'access arguments' => array(1)
  );
  */ 
  $items['node/%node/pdf3'] = array(
    'title' => 'PDF3',
    'page callback' => 'exercise_pdf_advanced',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'exercise_pdf_access',
    'access arguments' => array(1)
  );
  /*
  $items['node/%node/print'] = array(
    'title' => 'PDF',
    'page callback' => 'article_pdf',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'article_pdf_access',
    'access arguments' => array(1)
  );
  */          
  $items['node/%node/pdf4'] = array(
    'title' => t('PDF'),
    'page callback' => 'exerciseprogram_print_compact_pdf',
    'page arguments' => array(1),
    'access callback' => 'exerciseprogram_pdf_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  /*  
  $items['exerciseprogram/print_compact/%/exercisespdf'] = array(
    'title' => t('Exercise PDF cards'),
    'page callback' => 'exerciseprogram_print_compact_pdf_of_exercises',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  */        
  return $items;
}

/**
 * Checks for access for exercises
 */
function exercise_pdf_access($node) {
  if ($node->type != 'exercise') {
    return FALSE;
  }
  return TRUE;
}


/**
 * Checks for access for exercise programs
 */
function exerciseprogram_pdf_access($node) {
  if ($node->type != 'trainingprogram') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Checks for access for articles
 */
function article_pdf_access($node) {
  if ($node->type != 'story') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Plugin for the PDF printouts.
 *
 * Implements hook_ctools_plugin_type().
 *
 * Has plenty options. See ctools/help/plugins-creating.html
 */
function motionsplan_exercise_pdf_ctools_plugin_type() {
  $plugins['layouts'] = array(
    'use hooks' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function motionsplan_exercise_pdf_ctools_plugin_directory($owner, $plugin) {
  if (($owner == 'motionsplan_exercise_pdf') && ($plugin == 'layouts')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Fetch metadata on a specific layout plugin.
 *
 * @param string $layout
 *   Name of a panel layout. If the layout name contains a ':' this
 *   indicates that we need to separate the sublayout out and
 *   load it individually.
 *
 * @return array
 *   An array with information about the requested panel layout.
*/
function motionsplan_exercise_pdf_get_layout($layout) {
  ctools_include('plugins');
  return ctools_get_plugins('motionsplan_exercise_pdf', 'layouts', $layout);
}

/**
 * Fetch metadata for all layout plugins.
 *
 * @param
 *   string $id Optional plugin ID
 *
 * @return array
 *   An array of arrays with information about all available layouts.
 */
function motionsplan_exercise_pdf_get_layouts($id = NULL) {
  ctools_include('plugins');
  return ctools_get_plugins('motionsplan_exercise_pdf', 'layouts', $id);
}

/**
 * Returns pdf layouts plugin.
 */
function motionsplan_exercise_pdf_layouts() {
  return variable_get('motionsplan_exercise_pdf_layout', 'landscape');
}

/**
 * Implements hook_admin_settings().
 */
function motionsplan_exercise_pdf_admin_settings() {
  global $base_url;
  $options = array();
  foreach (motionsplan_exercise_pdf_get_layouts() as $key => $layout) {
    $options[$key] = $key;
  }
  
  $form = array();

  $form['motionsplan_exercise_pdf']['layout'] = array(
    '#type' => 'select',
    '#title' => t('Layout'),
    '#default_value' => variable_get('motionsplan_exercise_pdf_layout', 'portrait'),
    '#options' => $options,
    '#description' => t("Which layout do you wish to use?"),
    '#required' => TRUE,
  );

  // Use the #managed_file FAPI element to upload an image file.
  $form['motionsplan_exercise_pdf']['logo'] = array(
    '#title' => t('Logo'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#default_value' => variable_get('motionsplan_exercise_pdf_logo', ''),
    '#upload_location' => 'public://logo/',
  );

  $form['motionsplan_exercise_pdf']['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#default_value' => variable_get('motionsplan_exercise_pdf_link', $base_url),
    '#description' => t("Link to use for the logo"),
    '#required' => TRUE,
  );

  $form['#submit'][] = 'motionsplan_exercise_pdf_admin_settings_submit';
  return system_settings_form($form);
}

/**
 * Implements hook_admin_settings_validate().
 */
function motionsplan_exercise_pdf_admin_settings_validate($form, &$form_state) {
  return TRUE;
}

/**
 * Implements hook_admin_settings_submit().
 */
function motionsplan_exercise_pdf_admin_settings_submit($form, &$form_state) {
  variable_set('motionsplan_exercise_pdf_layout', $form_state['values']['layout']);
  variable_set('motionsplan_exercise_pdf_link', $form_state['values']['link']);

  // @see http://drupal.org/node/1090198.
  global $user;
  if (is_numeric($form_state['values']['logo']) && $form_state['values']['logo'] > 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['logo']);
    if ($file) {
      // Change status to permanent.
      $file->status = FILE_STATUS_PERMANENT;
      // Save.
      file_save($file);
      // Save file to variable.
      variable_set('motionsplan_exercise_pdf_logo', $file->fid);
      // Record that the module (in this example, user module) is using the file.
      file_usage_add($file, 'motionsplan_exercise_pdf', 'user', $user->uid);
      // Unset formstate value - make sure it is unset before system submit.
      unset($form_state['values']['logo']);
    }
  }
  else {
    // Load the file via file.fid.
    $file = file_load(variable_get('motionsplan_exercise_pdf_logo', ''));
    
    if ($file->fid) {
      // Delete the file and the usage record.
      file_delete($file, TRUE);
    }

    variable_set('motionsplan_exercise_pdf_logo', '');
  }
}

/**
 * Creates a pdf of an article node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function article_pdf($node) {
  global $base_url;
  require_once libraries_get_path('tcpdf') . '/tcpdf.php';
  require_once libraries_get_path('fpdf') . '/src/fpdf.php';    
  ctools_include('motionsplan_exercise_pdf.pdf', 'motionsplan_exercise_pdf', '.');

  $title = $node->title;
  $pdf = new ArticlePdf($node);
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $pdf->AddContent();
  $pdf->Output($title . '.pdf', 'I');
}

/**
 * Creates a pdf of an exercise node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function exercise_pdf_portrait($node) {
  global $base_url;
  require_once libraries_get_path('fpdf') . '/src/fpdf.php';
  ctools_include('Layout', 'motionsplan_exercise_pdf', 'plugins/layout/portrait');

  $title = utf8_decode($node->title);
  $pdf = new ExercisePdfPortrait();
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $pdf->AddPage($node);
  $pdf->Output($title . '.pdf', 'I');
}

/**
 * Creates a pdf of an exercise node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function exercise_pdf_landscape($node) {
  global $base_url;
  require_once libraries_get_path('fpdf') . '/src/fpdf.php';
  ctools_include('Layout', 'motionsplan_exercise_pdf', 'plugins/layout/landscape');

  $title = utf8_decode($node->title);
  $pdf = new ExercisePdfLandscape();
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $pdf->AddPage($node);
  $pdf->Output($title . '.pdf', 'I');
}

/**
 * Creates a pdf of an exercise node
 * 
 * @param $nid Node id
 *
 * @return void
 */
function exercise_pdf_advanced($node) {
  global $base_url;
  require_once libraries_get_path('tcpdf') . '/tcpdf.php';
  ctools_include('Layout', 'motionsplan_exercise_pdf', 'plugins/layouts/portrait_extended');

  $title = utf8_decode($node->title);
  $pdf = new ExerciseAdvancedPdfPortrait();
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $pdf->AddPage($node);
  $pdf->Output($title . '.pdf', 'I');
}

/**
 * Prints A4 of the exercises in a program.
 */
function exerciseprogram_print_compact_pdf_of_exercises() {
  global $base_path;
  require_once libraries_get_path('fpdf') . '/src/fpdf.php';
  ctools_include('motionsplan_exercise_pdf.pdf', 'motionsplan_exercise_pdf', '.');

  $nids = exerciseprogram_get_nids(arg(2));
  if (sizeof($nids)<=0) {
    return '<strong>Du skal tilføje øvelser for at kunne udskrive</strong>';
  }

  $pdf = new ExercisePdfPortrait();
  $pdf->SetTitle(utf8_decode('Træningsøvelser'));
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');

  foreach ($nids as $nid) {
    $node = node_load($nid);
    $pdf->AddPage($node);
  }
  $pdf->Output();
}

/**
 * Outputs pdf of a compact training program.
 */
function exerciseprogram_print_compact_pdf($node) {
  global $base_path;
  require_once libraries_get_path('fpdf') . '/src/fpdf.php';
  require_once libraries_get_path('tcpdf') . '/tcpdf.php';  
  ctools_include('motionsplan_exercise_pdf.pdf', 'motionsplan_exercise_pdf', '.');

  $title = utf8_decode($node->title);
  $description = utf8_decode($node->body[LANGUAGE_NONE][0]['value']);

  $pdf = new ExerciseProgramCompactPdf();
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $pdf->SetAutoPageBreak(FALSE);

  $pdf->AddPage();
  $pdf->SetFont('Helvetica', 'B', 20);
  $pdf->Cell(0, 10, $title, null, 2, 'L', FALSE);
  $pdf->Image(dirname(__FILE__) . '/mp-logo.png',150,8,50,0,'', 'http://motionsplan.dk/');
  $pdf->setTextColor(0, 0, 0);

  $pdf->SetFont('Helvetica', null, 10);
  $pdf->MultiCell(180, 6, $description, 0);
  $pdf->SetY($pdf->GetY()+2);

  // Table starts.
  $pdf->SetWidths(array(50,70,70));
  $pdf->SetFont('Helvetica', 'B', 10);
  $pdf->Row(array(utf8_decode('Øvelse'), utf8_decode('Beskrivelse'), utf8_decode('Kommentar')));
  $pdf->SetFont('Helvetica', null, 10);

  foreach ($node->field_program_exercises[LANGUAGE_NONE] as $entity) {
    $e = node_load($entity['target_id']);

    $imgs = array();
    $style = 'exercise_extended_pdf';
    foreach ($e->field_exercise_images[LANGUAGE_NONE] as $img) {
      $dst = image_style_path($style, $image['uri']);
      if (file_exists($dst) AND !is_dir($dst) || image_style_create_derivative($style, $image['uri'], $dst)) { 
        $picture_filename = drupal_realpath(image_style_path($style, $image['uri']));
        $imgs[] = $picture_filename;
      }
    }
	if (sizeof($imgs) > 3) {
      $tmp_imgs = array();
      $tmp_imgs[] = $imgs[0];
      $tmp_imgs[] = $imgs[floor(sizeof($imgs) / 2)];
      $tmp_imgs[] = $imgs[sizeof($imgs) - 1];
      $imgs = $tmp_imgs;
    }

    $pdf->Row(array(utf8_decode($e->title), utf8_decode($e->field_exercise_intro[LANGUAGE_NONE][0]['value']), ''), $imgs); 
  }

  $pdf->Output($title . '.pdf', 'I');
}

/**
 * Choose your own pdf's 
 *
 * Implements hook_node_operations().
 */
function motionsplan_exercise_pdf_node_operations() {
  $operations = array(
    'pdf' => array(
      'label' => t('Print PDF (max 10)'), 
      'callback' => 'node_operations_pdf',
  ));
  return $operations;
}

/**
 * Make it possible to print exercises you choose.
 */
function node_operations_pdf($nodes) {
  global $base_url;

  $title = 'Træningsøvelser';
  $pdf = new ExerciseAdvancedPdfPortrait(FALSE);
  $pdf->SetTitle($title);
  $pdf->SetSubject('');
  $pdf->SetAuthor('Motionsplan.dk');
  $i = 0;
  $number = 10;
  foreach ($nodes as $node_id) {
    if ($i >= $number) {
      $error = TRUE;
      break;
    }
    $node = node_load($node_id);
    if ($node->type != 'exercise') {
      continue;
    }
    $i++;
    $pdf->AddPage($node);
  }
  if ($error !== TRUE) {
    $pdf->Output($title . '.pdf', 'D');
  } else {
    drupal_set_message(t('Can only print %number pages at a time', array('%number' => $number)), 'error');
  } 
}
